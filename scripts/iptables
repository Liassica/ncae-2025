#!/usr/bin/env bash

# SOURCE: https://wiki.archlinux.org/title/Simple_stateful_firewall

# Load empty rules
cat <<EOF | iptables-restore
*filter
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
COMMIT
EOF

# Create TCP and UDP chains
iptables -N TCP
iptables -N UDP

# Don't forward packets
iptables -P FORWARD DROP

# Allow outbound traffic
# TODO: restrict/harden
iptables -P OUTPUT ACCEPT

# Deny incoming traffic by default
iptables -P INPUT DROP

# Allow related/established traffic using conntrack module
iptables -A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT

# Allow loopback traffic
# TODO: determine if necessary
iptables -A INPUT -i lo -j ACCEPT
iptables -A OUTPUT -o lo -j ACCEPT

# Deny invalid packets
iptables -A INPUT -m conntrack --ctstate INVALID -j DROP

# Allow ICMP pings
# TODO: determine if necessary
iptables -A INPUT -p icmp --icmp-type 8 -m conntrack --ctstate NEW -j ACCEPT

# Handle TCP/UDP connections
iptables -A INPUT -p udp -m conntrack --ctstate NEW -j UDP
iptables -A INPUT -p tcp --syn -m conntrack --ctstate NEW -j TCP

# Reject unreachable ICMP messages
iptables -A INPUT -p udp -j REJECT --reject-with icmp-port-unreachable

# Reject TCP RESET packets
iptables -A INPUT -p tcp -j REJECT --reject-with tcp-reset

# Reject ICMP protocol unreachable messages
iptables -A INPUT -j REJECT --reject-with icmp-proto-unreachable

# Extra open ports
while getopts "Ss:Ww:Dd:Mm:Ff:" opt; do
  case "$opt" in
  S)
    iptables -A TCP -p tcp --dport 22 -j ACCEPT
    ;;
  s)
    iptables -A TCP -p tcp --dport 22 -s $OPTARG -j ACCEPT
    ;;
  W)
    iptables -A TCP -p tcp --dport 80 -j ACCEPT
    iptables -A TCP -p tcp --dport 443 -j ACCEPT
    ;;
  w)
    iptables -A TCP -p tcp --dport 80 -s $OPTARG -j ACCEPT
    iptables -A TCP -p tcp --dport 443 -s $OPTARG -j ACCEPT
    ;;
  D)
    iptables -A TCP -p tcp --dport 53 -j ACCEPT
    iptables -A UDP -p udp --dport 53 -j ACCEPT
    ;;
  d)
    iptables -A TCP -p tcp --dport 53 -s $OPTARG -j ACCEPT
    iptables -A UDP -p udp --dport 53 -s $OPTARG -j ACCEPT
    ;;
  M)
    iptables -A TCP -p tcp --dport 3306 -j ACCEPT
    ;;
  m)
    iptables -A TCP -p tcp --dport 3306 -s $OPTARG -j ACCEPT
    ;;
  F)
    iptables -A TCP -p tcp --dport 21 -j ACCEPT
    ;;
  f)
    iptables -A TCP -p tcp --dport 21 -s $OPTARG -j ACCEPT
    ;;
  esac
done

# Save rules in non-standard directory
# Protects against scripts using default directories
if ! [[ -d /etc/trojan_horses ]]; then
  mkdir -p /etc/trojan_horses/
fi
iptables-save -f /etc/trojan_horses/iptables.rules

# Create service
if ! systemctl status trojan_horses-iptables.service &>/dev/null; then
  cat <<EOF >/etc/systemd/system/trojan_horses-iptables.service
[Unit]
Description=IPv4 Packet Filtering Framework
Before=network-pre.target
Wants=network-pre.target

[Service]
Type=oneshot
ExecStart=/usr/sbin/iptables-restore /etc/trojan_horses/iptables.rules
ExecReload=/usr/sbin/iptables-restore /etc/trojan_horses/iptables.rules
RemainAfterExit=yes

[Install]
WantedBy=multi-user.target
EOF
fi

# Disable any default firewall services and enable ours
systemctl disable --now iptables.service
systemctl disable --now ip6tables.service
systemctl disable --now ufw.service

systemctl enable --now trojan_horses-iptables.service

systemctl mask iptables.service
systemctl mask ip6tables.service
systemctl mask ufw.service
